local direction = 0

local x,y,z = 0,0,0

local safe = false

function getDir()
    return direction
end

function getPos()
    return {x,y,z}
end

function goTo(n)
	print(type(n))
	for a,i in pairs(n) do
		print(i,type(i))
	end
    l={{y,n[2],0,2},{x,n[1],1,3},{z,n[3],up,down}}
    for a,i in pairs(l) do
        if type(i[3])=="number" then
            if i[1]>i[2] then
                face(i[4])
				for j=1,i[1]-i[2] do
					if not dig() then
						up()
					end 
					forward()
				end
            else
                face(i[3])
				for j=1,i[2]-i[1] do
					dig()
					forward()
				end
            end
        else
            if i[1]>i[2] then
                i[4](i[1]-i[2])
            else
                 i[3](i[2]-i[1])
            end
        end
    end
    face(0)
end

function move(x_,y_,z_)
    l={{y_,0,2},{x_,1,3},{z_,up,down}}
    for a,i in pairs(l) do
        if type(i[3])=="number" then
            if i[1]<0 then
                face(i[3])
            else
                face(i[2])
            end
            forward(i[1])
        else
            if i[1]>0 then
                i[4](z_)
            else
                i[3](z_)
            end
        end
    end
    face(0)
end

function face(n)
    right((4-(direction-n))%4)
end

function up(n)
    for i=1,n do
        while not turtle.up() do
            digUp()
        end
    end
    z=z+n
end

function down(n)
    for i=1,n do
        turtle.down()
    end
    z=z-n
end

function forward()
	if turtle.forward() then
		channgePos(1)
		return true
	end
	return false
end

function back(n)
    for i=1,n do
        turtle.back()
    end
    channgePos(-n)
end

function left(n)
    for i=1,n do
        turtle.turnLeft()
    end
    channgeDir(-n)
end

function right(n)
    for i=1,n do
        turtle.turnRight()
    end
    channgeDir(n)
end

function channgePos(n)
    if direction == 0 then
        y=y+n
    elseif direction == 1 then
        x=x+n
    elseif direction == 2 then
        y=y-n
    else
        x=x-n
    end
end

function channgeDir(n)
    direction=(direction+n)%4
end

function dig()
	if isDigable() then
		while turtle.detect() do
			turtle.dig()
		end
		return true
	else 
		up()
	end
	return false
end

function digDown()
	if isDownDigable() then
		while turtle.detectDown() do
			turtle.digDown()
		end
		return true
	end
	return false
end

function digUp()
	if isUpDigable() then
		while turtle.detectUp() do
			turtle.digUp()
		end
		return true
	end
	return false
end

function isDigable()
	r=select(2,turtle.dig())
	if r=="Unbreakable block detected" then
		return false
	end
	return true
end 

function isDownDigable()
	r=select(2,turtle.digDown())
	if r=="Unbreakable block detected" then
		return false
	end
	return true
end 

function isUpDigable()
	r=select(2,turtle.digUp())
	if r=="Unbreakable block detected" then
		return false
	end
	return true
end 